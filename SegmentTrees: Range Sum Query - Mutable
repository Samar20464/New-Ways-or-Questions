
Given an integer array nums, handle multiple queries of the following types:

Update the value of an element in nums.
Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
void update(int index, int val) Updates the value of nums[index] to be val.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).

Input
["NumArray", "sumRange", "update", "sumRange"]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]

Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9
numArray.update(1, 2);   // nums = [1, 2, 5]
numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8

import java.util.*;
import java.util.List;


class NumArray {

    class SegmentTreeNode
    {
        int start,end,sum;
        SegmentTreeNode left,right;
        SegmentTreeNode(int start,int end)
        {
            this.start = start;
            this.end = end;
            sum=0;
            left = null;
            right=null;
        }
    }

    SegmentTreeNode root;

    public NumArray(int[] nums) {
        root =  buildTree(nums,0,nums.length-1);
    }

    SegmentTreeNode buildTree(int[] nums,int start,int end)
    {
        if(start>end)
            return null;
        else
        {
            SegmentTreeNode ret = new SegmentTreeNode(start,end);
            if(start==end)
                ret.sum = nums[start];
            else
            {
                int mid = start + (end-start)/2;
                ret.left = buildTree(nums,start,mid);
                ret.right = buildTree(nums,mid+1,end);
                ret.sum = ret.left.sum+ ret.right.sum;
            }
            return ret;
        }
    }
    public void update(int index, int val) {
        update(root,index,val);
    }
    public void update(SegmentTreeNode root,int index,int val)
    {
        if(root.start==root.end)
            root.sum = val;
        else {
            int mid = root.start + (root.end - root.start) / 2;
            if (index <= mid)
                update(root.left, index, val);
            else
                update(root.right, index, val);
            root.sum= root.left.sum+root.right.sum;
        }

    }
    public int sumRange(int left, int right) {
        return sumRange(root,left,right);
    }

    public int sumRange(SegmentTreeNode root,int start,int end)
    {
        if(root.end==end && root.start==start)
            return root.sum;
        else
        {
            int mid = root.start + (root.end-root.start)/2;

            if(end<=mid)
                return sumRange(root.left,start,end);
            else if(start>=mid+1)
                return sumRange(root.right, start,end);
            else
                return sumRange(root.right,mid+1,end) + sumRange(root.left,start,end);
        }
    }
}

public class Solution {

     public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

    }

}
