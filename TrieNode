class Solution {

    static class TrieNode
    {
       public TrieNode left,right;
    }

    static void insert(int n,TrieNode head)
    {
        TrieNode curr = head;

        for (int i = 31;i>=0;i--)
        {
            int b = (n>>i) & 1;
            if(b==0)
            {
                if(curr.left==null)
                {
                    curr.left = new TrieNode();
                }
                curr = curr.left;
            }
            else
            {
                if(curr.right==null)
                {
                    curr.right = new TrieNode();
                }
                curr = curr.right;
            }
        }
    }

    static int findMaxXorPair(TrieNode head,int[] arr,int n)
    {
        int max_xor = Integer.MIN_VALUE;

        for (int i =0;i<n;i++)
        {
            int value = arr[i];
            TrieNode curr = head;

            int curr_xor = 0;

            for (int j = 31;j>=0;j--)
            {
                int b = (value>>j) &1 ;
                if(b==0)
                {
                    if(curr.right!=null)
                    {
                        curr_xor += Math.pow(2,j);
                        curr = curr.right;
                    }
                    else
                        curr = curr.left;
                }
                else
                {
                    if(curr.left!=null)
                    {
                        curr_xor += Math.pow(2,j);
                        curr = curr.left;
                    }
                    else
                        curr = curr.right;
                }
            }

            if(curr_xor> max_xor)
                max_xor = curr_xor;
        }
        return max_xor;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        int[] arr = {8,1,2,15,10,5};
        TrieNode head  = new TrieNode();
        for (int i=0;i<6;i++)
            insert(arr[i],head);

        System.out.println(findMaxXorPair(head,arr,6));
    }

}
